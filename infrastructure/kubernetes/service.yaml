apiVersion: v1
kind: Service
metadata:
  name: labarchives-mcp
  labels:
    app: labarchives-mcp
    version: "0.1.0"
    component: mcp-server
    managed-by: kubernetes
  annotations:
    description: "Kubernetes Service for LabArchives MCP Server. Provides stable network endpoint for AI integration via Model Context Protocol."
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "false"
    # Security annotations for compliance
    security.kubernetes.io/access-control: "internal-only"
    security.kubernetes.io/data-classification: "confidential"
    # Compliance annotations
    compliance.kubernetes.io/soc2: "enabled"
    compliance.kubernetes.io/iso27001: "enabled"
    compliance.kubernetes.io/hipaa: "enabled"
    compliance.kubernetes.io/gdpr: "enabled"
    # Operational annotations
    kubernetes.io/managed-by: "labarchives-mcp-operator"
    networking.kubernetes.io/ingress-class: "nginx"
    # Documentation annotations
    documentation.kubernetes.io/api-reference: "https://github.com/org/labarchives-mcp-server/blob/main/docs/api.md"
    documentation.kubernetes.io/deployment-guide: "https://github.com/org/labarchives-mcp-server/blob/main/docs/deployment.md"
spec:
  # Service type - ClusterIP for internal-only access by default
  # Change to NodePort (30000-32767) or LoadBalancer for external access
  type: ClusterIP
  
  # Selector must match the labels in deployment.yaml pod template
  selector:
    app: labarchives-mcp
  
  # Port configuration
  ports:
  - name: http
    protocol: TCP
    port: 8080          # Service port exposed within cluster
    targetPort: 8080    # Container port (must match deployment.yaml containerPort)
    # nodePort: 30080   # Uncomment and set for NodePort type (range: 30000-32767)
  
  # Session affinity for consistent routing (optional)
  sessionAffinity: None
  
  # IP families for dual-stack support (optional)
  ipFamilyPolicy: SingleStack
  ipFamilies:
  - IPv4
  
  # Internal traffic policy for cluster-internal routing
  internalTrafficPolicy: Cluster
  
  # External traffic policy (only relevant for LoadBalancer/NodePort)
  # externalTrafficPolicy: Local  # Uncomment for NodePort/LoadBalancer
  
  # Published not ready addresses (default: false for ClusterIP)
  publishNotReadyAddresses: false

---
# Optional: Service Monitor for Prometheus monitoring (if monitoring is enabled)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: labarchives-mcp-monitor
  labels:
    app: labarchives-mcp
    version: "0.1.0"
    component: mcp-server
  annotations:
    description: "Prometheus ServiceMonitor for LabArchives MCP Server metrics collection"
spec:
  selector:
    matchLabels:
      app: labarchives-mcp
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
    scheme: http
    # Optional: TLS configuration for secure metrics
    # tlsConfig:
    #   insecureSkipVerify: true
  namespaceSelector:
    matchNames:
    - default  # Adjust namespace as needed

---
# Optional: Network Policy for enhanced security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: labarchives-mcp-network-policy
  labels:
    app: labarchives-mcp
    version: "0.1.0"
    component: mcp-server
  annotations:
    description: "Network policy for LabArchives MCP Server - allows ingress from specific sources only"
spec:
  podSelector:
    matchLabels:
      app: labarchives-mcp
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-system
    - podSelector:
        matchLabels:
          app: nginx-ingress
    ports:
    - protocol: TCP
      port: 8080
  # Allow ingress from monitoring systems
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring-system
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # Allow egress to LabArchives API
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS to LabArchives API
    - protocol: TCP
      port: 80   # HTTP redirect to HTTPS
  # Allow DNS resolution
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53

---
# Optional: Service Account for RBAC (if needed)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: labarchives-mcp-service-account
  labels:
    app: labarchives-mcp
    version: "0.1.0"
    component: mcp-server
  annotations:
    description: "Service account for LabArchives MCP Server with minimal required permissions"
automountServiceAccountToken: false  # Security best practice

---
# Optional: Role and RoleBinding for minimal permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: labarchives-mcp-role
  labels:
    app: labarchives-mcp
    version: "0.1.0"
    component: mcp-server
rules:
# Minimal permissions for health checks and basic operations
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: labarchives-mcp-rolebinding
  labels:
    app: labarchives-mcp
    version: "0.1.0"
    component: mcp-server
subjects:
- kind: ServiceAccount
  name: labarchives-mcp-service-account
  namespace: default  # Adjust namespace as needed
roleRef:
  kind: Role
  name: labarchives-mcp-role
  apiGroup: rbac.authorization.k8s.io