name: Continuous Integration

# Workflow triggers for comprehensive CI coverage
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

# Environment variables for consistent configuration
env:
  PYTHON_DEFAULT_VERSION: "3.11"
  COVERAGE_THRESHOLD: 85
  MYPY_CACHE_DIR: .mypy_cache

# Define CI jobs with comprehensive testing matrix
jobs:
  # Main test job with matrix strategy for multi-version and multi-OS support
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    # Strategy matrix for comprehensive platform and version coverage
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      # Step 1: Checkout repository code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for potential versioning needs
      
      # Step 2: Set up Python environment
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'  # Enable pip caching for faster builds
      
      # Step 3: Upgrade pip to latest version
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
      
      # Step 4: Install project dependencies
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      # Step 5: Verify installation and environment
      - name: Verify installation
        run: |
          python --version
          pip --version
          pip list
      
      # Step 6: Run pytest with comprehensive coverage
      - name: Run tests with coverage
        run: |
          pytest tests/ -v --cov=src/ --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=${{ env.COVERAGE_THRESHOLD }}
        env:
          PYTEST_ADDOPTS: "--strict-markers --disable-warnings"
      
      # Step 7: Run mypy for static type checking
      - name: Run mypy type checking
        run: |
          mypy src/ --config-file=pyproject.toml --cache-dir=${{ env.MYPY_CACHE_DIR }}
      
      # Step 8: Run black for code formatting validation
      - name: Check code formatting with black
        run: |
          black --check --diff src/ tests/
      
      # Step 9: Run additional code quality checks
      - name: Run flake8 linting
        run: |
          flake8 src/ tests/ --config=.flake8
        continue-on-error: true  # Allow linting failures for now
      
      # Step 10: Run isort for import sorting validation
      - name: Check import sorting with isort
        run: |
          isort --check-only --diff src/ tests/
        continue-on-error: true
      
      # Step 11: Upload coverage reports to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      
      # Step 12: Store coverage reports as artifacts
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports-${{ matrix.python-version }}-${{ matrix.os }}
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30
      
      # Step 13: Store test results as artifacts
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}-${{ matrix.os }}
          path: |
            pytest-results.xml
            test-reports/
          retention-days: 30

  # Security scanning job
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      # Step 1: Checkout repository code
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Step 2: Set up Python environment
      - name: Set up Python ${{ env.PYTHON_DEFAULT_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
      
      # Step 3: Install security scanning tools
      - name: Install security tools
        run: |
          pip install safety bandit semgrep
      
      # Step 4: Run dependency security scanning
      - name: Run safety check for dependencies
        run: |
          safety check --json --output safety-report.json
        continue-on-error: true
      
      # Step 5: Run bandit for security linting
      - name: Run bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true
      
      # Step 6: Upload security scan results
      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: |
            safety-report.json
            bandit-report.json
          retention-days: 90

  # Code quality and metrics job
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      # Step 1: Checkout repository code
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Step 2: Set up Python environment
      - name: Set up Python ${{ env.PYTHON_DEFAULT_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
      
      # Step 3: Install code quality tools
      - name: Install code quality tools
        run: |
          pip install -r requirements-dev.txt
          pip install radon xenon
      
      # Step 4: Run complexity analysis
      - name: Run complexity analysis
        run: |
          radon cc src/ --json > complexity-report.json
          radon mi src/ --json > maintainability-report.json
        continue-on-error: true
      
      # Step 5: Upload code quality reports
      - name: Upload code quality reports
        uses: actions/upload-artifact@v3
        with:
          name: code-quality-reports
          path: |
            complexity-report.json
            maintainability-report.json
          retention-days: 30

  # Documentation build verification
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout repository code
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Step 2: Set up Python environment
      - name: Set up Python ${{ env.PYTHON_DEFAULT_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
      
      # Step 3: Install documentation tools
      - name: Install documentation dependencies
        run: |
          pip install -r requirements-dev.txt
          pip install sphinx sphinx-rtd-theme
      
      # Step 4: Check documentation links and references
      - name: Check documentation
        run: |
          python -m doctest src/**/*.py
        continue-on-error: true

  # Build and package verification
  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      # Step 1: Checkout repository code
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Step 2: Set up Python environment
      - name: Set up Python ${{ env.PYTHON_DEFAULT_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
      
      # Step 3: Install build tools
      - name: Install build dependencies
        run: |
          pip install build twine
      
      # Step 4: Build package
      - name: Build package
        run: |
          python -m build
      
      # Step 5: Check package integrity
      - name: Check package
        run: |
          twine check dist/*
      
      # Step 6: Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/
          retention-days: 30

  # Integration test job for MCP protocol compliance
  integration-test:
    name: MCP Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      # Step 1: Checkout repository code
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Step 2: Set up Python environment
      - name: Set up Python ${{ env.PYTHON_DEFAULT_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
      
      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      # Step 4: Run MCP protocol compliance tests
      - name: Run MCP integration tests
        run: |
          pytest tests/integration/ -v --tb=short
        env:
          LABARCHIVES_TEST_MODE: "true"
      
      # Step 5: Upload integration test results
      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: |
            integration-test-reports/
          retention-days: 30

# Workflow status notification and summary
  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [test, security-scan, code-quality, docs-check, build-check, integration-test]
    if: always()
    
    steps:
      # Step 1: Generate workflow summary
      - name: Generate workflow summary
        run: |
          echo "## CI/CD Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Status**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan**: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Documentation**: ${{ needs.docs-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Check**: ${{ needs.build-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Integration Tests**: ${{ needs.integration-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Coverage and Quality Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage Threshold**: ${{ env.COVERAGE_THRESHOLD }}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Python Versions**: 3.11, 3.12" >> $GITHUB_STEP_SUMMARY
          echo "- **Operating Systems**: Ubuntu, Windows, macOS" >> $GITHUB_STEP_SUMMARY