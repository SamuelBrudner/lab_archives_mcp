name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
        miniforge-variant: Miniforge3
        use-mamba: true

    - name: Install conda-lock
      shell: bash -el {0}
      run: |
        mamba install -c conda-forge conda-lock

    - name: Create environment from lock file
      shell: bash -el {0}
      run: |
        conda-lock install --prefix ./conda_envs/test-env conda-lock.yml

    - name: Install package in development mode
      shell: bash -el {0}
      run: |
        conda run -p ./conda_envs/test-env pip install -e ".[dev]"

    - name: Run pre-commit checks
      shell: bash -el {0}
      run: |
        conda run -p ./conda_envs/test-env pre-commit run --all-files
      continue-on-error: true  # Don't fail CI on formatting issues

    - name: Run unit tests
      shell: bash -el {0}
      run: |
        conda run -p ./conda_envs/test-env pytest -v -m "not integration" --cov=src --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      # Upload coverage only on ubuntu with Python 3.11, skip if token not configured
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true  # Don't fail if token not configured

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install ruff mypy black isort

    - name: Run Ruff
      run: ruff check src tests

    - name: Run Black
      run: black --check src tests

    - name: Run isort
      run: isort --check-only src tests

    - name: Run mypy
      run: mypy src
      continue-on-error: true  # Type checking is strict, don't fail CI

  integration:
    name: Integration Tests (Optional)
    runs-on: ubuntu-latest
    # Only run on main branch pushes; will skip if secrets not configured
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: '3.11'
        miniforge-variant: Miniforge3
        use-mamba: true

    - name: Install conda-lock
      shell: bash -el {0}
      run: |
        mamba install -c conda-forge conda-lock

    - name: Create environment from lock file
      shell: bash -el {0}
      run: |
        conda-lock install --prefix ./conda_envs/test-env conda-lock.yml

    - name: Install package
      shell: bash -el {0}
      run: |
        conda run -p ./conda_envs/test-env pip install -e ".[dev,vector]"

    - name: Run integration tests
      shell: bash -el {0}
      # Secrets are optional - tests will skip if not configured
      env:
        LABARCHIVES_AKID: ${{ secrets.LABARCHIVES_AKID }}
        LABARCHIVES_PASSWORD: ${{ secrets.LABARCHIVES_PASSWORD }}
        LABARCHIVES_UID: ${{ secrets.LABARCHIVES_UID }}
        LABARCHIVES_REGION: ${{ secrets.LABARCHIVES_REGION }}
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
      run: |
        conda run -p ./conda_envs/test-env pytest -v -m integration
      continue-on-error: true  # Don't fail CI if secrets not configured
