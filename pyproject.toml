[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "labarchives-mcp-pol"
version = "0.1.0"
description = "Proof-of-life MCP server for LabArchives ELN."
readme = "README.md"
requires-python = ">=3.11"
authors = [
  { name = "Samuel Brudner", email = "samuel.brudner@yale.edu" }
]
license = { text = "MIT" }
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering :: Bio-Informatics"
]
dependencies = [
  "httpx>=0.27",
  "lxml>=5.2",
  "pydantic>=2.7",
  "aiofiles>=24.1",
  "loguru>=0.7",
  "hydra-core>=1.3",
  "tenacity>=8.3",
  "omegaconf>=2.3",
  "fastmcp>=2.1",
  "notebook>=7.2",
  # Vector backend dependencies
  "tiktoken>=0.7",
  "langchain>=0.2",
  "openai>=1.40",
  "pandas>=2.2",
  "pyarrow>=16.0",
  "beautifulsoup4>=4.12",
  "click>=8.1"
]

[project.scripts]
labarchives-mcp = "labarchives_mcp.mcp_server:run"

[project.optional-dependencies]
dev = [
  "pytest>=8.3",
  "pytest-asyncio>=0.23",
  "pytest-cov>=5.0",
  "pytest-benchmark>=4.0",
  "hypothesis>=6.100",
  "vcrpy>=6.0",
  "respx>=0.21",
  "mutmut>=2.4",
  "mypy>=1.9",
  "ruff>=0.5",
  "black>=24.4",
  "isort>=5.13",
  "pre-commit>=3.7",
  "nbstripout>=0.6",
  "nbdime>=4.0",
  "commitizen>=3.12"
]
vector = [
  "pinecone-client>=4.1",
  "qdrant-client>=1.9"
]

[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]
include = ["labarchives_mcp*", "vector_backend*"]

[tool.black]
line-length = 100
target-version = ["py311", "py312"]

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["labarchives_mcp", "vector_backend"]

[tool.ruff]
line-length = 100
select = ["E", "F", "W", "I", "B", "UP", "N", "ASYNC"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_no_return = true
warn_unreachable = true
plugins = []
exclude = ["tests/", "scripts/"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra --strict-markers"
testpaths = ["tests"]
filterwarnings = [
  "error::DeprecationWarning",
  "error::PendingDeprecationWarning"
]
markers = [
  "integration: marks tests that hit external services (deselect with '-m \"not integration\"')",
  "slow: marks tests that take longer than expected"
]
asyncio_mode = "auto"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
version_files = [
  "pyproject.toml:^version"
]
update_changelog_on_bump = true
tag_format = "v$version"
